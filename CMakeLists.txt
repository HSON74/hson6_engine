# this is the build file for project 
# it is autogenerated by the xmake build system.
# do not edit by hand.

# project
cmake_minimum_required(VERSION 3.15.0)
cmake_policy(SET CMP0091 NEW)
project(helloworld LANGUAGES CXX C)

# target
add_executable(helloworld "")
set_target_properties(helloworld PROPERTIES OUTPUT_NAME "helloworld")
set_target_properties(helloworld PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/windows/x64/release")
add_dependencies(helloworld illengine)

add_subdirectory(imgui)

# [...]

target_link_libraries(App PRIVATE glfw webgpu glfw3webgpu imgui)
target_include_directories(helloworld PRIVATE
    src
)
target_include_directories(helloworld PRIVATE
    C:/Users/14423/AppData/Local/.xmake/packages/g/glfw/3.3.8/d12e591897c9472fb7d3725fa5811388/include
    C:/Users/14423/AppData/Local/.xmake/packages/s/spdlog/v1.12.0/bc8a841237a14a22acef4ace4e7bf71c/include
    C:/Users/14423/AppData/Local/.xmake/packages/s/sokol/2023.01.27/6e127509eef449d994f2668a6df8b420/include
    C:/Users/14423/AppData/Local/.xmake/packages/w/wgpu-native/v0.17.0+2/449bbe26b0ba466ba594e179158e4caa/include
    C:/Users/14423/AppData/Local/.xmake/packages/w/wgpu-native/v0.17.0+2/449bbe26b0ba466ba594e179158e4caa/include/webgpu
    C:/Users/14423/AppData/Local/.xmake/packages/g/glfw3webgpu/v1.0.1/1c77c5c3103d464ab63a5728bb543411/include
    C:/Users/14423/AppData/Local/.xmake/packages/s/soloud/2020.02.07/512314fd5727407eae3700844140601d/include
    C:/Users/14423/AppData/Local/.xmake/packages/m/miniaudio/0.11.17/8b370dd1b8a5478f9497d636212f2138/include
    C:/Users/14423/AppData/Local/.xmake/packages/g/glm/0.9.9+8/8335bab7c0314ab9921440de58961aac/include
    C:/Users/14423/AppData/Local/.xmake/packages/s/stb/2023.01.30/87edd883faeb4b168400e7458251d335/include
    C:/Users/14423/AppData/Local/.xmake/packages/s/stb/2023.01.30/87edd883faeb4b168400e7458251d335/include/stb
)
target_compile_definitions(helloworld PRIVATE
    GLFW_INCLUDE_NONE
)
target_compile_options(helloworld PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
if(MSVC)
    target_compile_options(helloworld PRIVATE -W3)
else()
    target_compile_options(helloworld PRIVATE -Wall)
endif()
if(CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "MSVC")
    target_compile_options(helloworld PRIVATE /EHsc)
else()
    target_compile_options(helloworld PRIVATE -fcxx-exceptions)
endif()
set_target_properties(helloworld PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(helloworld PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(helloworld PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(helloworld PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(helloworld PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET helloworld PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(helloworld PRIVATE
    glfw3
    opengl32
    wgpu_native
    glfw3webgpu
    soloud
    illengine
    user32
    shell32
    gdi32
    Advapi32
    bcrypt
    d3dcompiler
    NtDll
    User32
    Userenv
    WS2_32
)
target_link_directories(helloworld PRIVATE
    C:/Users/14423/AppData/Local/.xmake/packages/g/glfw/3.3.8/d12e591897c9472fb7d3725fa5811388/lib
    C:/Users/14423/AppData/Local/.xmake/packages/w/wgpu-native/v0.17.0+2/449bbe26b0ba466ba594e179158e4caa/lib
    C:/Users/14423/AppData/Local/.xmake/packages/g/glfw3webgpu/v1.0.1/1c77c5c3103d464ab63a5728bb543411/lib
    C:/Users/14423/AppData/Local/.xmake/packages/s/soloud/2020.02.07/512314fd5727407eae3700844140601d/lib
    build/windows/x64/release
)
target_sources(helloworld PRIVATE
    demo/helloworld.cpp
)

# target

add_library(illengine STATIC "")
# Define an ImGui target that fits our use case
add_library(imgui STATIC
    # Among the different backends available, we are interested in connecting
    # the GUI to GLFW andWebGPU:
    backends/imgui_impl_wgpu.h
    backends/imgui_impl_wgpu.cpp
    backends/imgui_impl_glfw.h
    backends/imgui_impl_glfw.cpp

    # Bonus to add some C++ specific features (the core ImGUi is a C library)
    misc/cpp/imgui_stdlib.h
    misc/cpp/imgui_stdlib.cpp

    # The core ImGui files
    imconfig.h
    imgui.h
    imgui.cpp
    imgui_draw.cpp
    imgui_internal.h
    imgui_tables.cpp
    imgui_widgets.cpp
    imstb_rectpack.h
    imstb_textedit.h
    imstb_truetype.h
)
target_include_directories(imgui PUBLIC .)
target_link_libraries(imgui PUBLIC webgpu glfw)

set_target_properties(illengine PROPERTIES OUTPUT_NAME "illengine")
set_target_properties(illengine PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/windows/x64/release")
add_subdirectory(imgui)

# [...]

target_link_libraries(App PRIVATE glfw webgpu glfw3webgpu imgui)
target_include_directories(illengine PRIVATE
    src
)
target_include_directories(illengine INTERFACE
    src
)
target_include_directories(illengine PRIVATE
    C:/Users/14423/AppData/Local/.xmake/packages/g/glfw/3.3.8/d12e591897c9472fb7d3725fa5811388/include
    C:/Users/14423/AppData/Local/.xmake/packages/s/spdlog/v1.12.0/bc8a841237a14a22acef4ace4e7bf71c/include
    C:/Users/14423/AppData/Local/.xmake/packages/s/sokol/2023.01.27/6e127509eef449d994f2668a6df8b420/include
    C:/Users/14423/AppData/Local/.xmake/packages/w/wgpu-native/v0.17.0+2/449bbe26b0ba466ba594e179158e4caa/include
    C:/Users/14423/AppData/Local/.xmake/packages/w/wgpu-native/v0.17.0+2/449bbe26b0ba466ba594e179158e4caa/include/webgpu
    C:/Users/14423/AppData/Local/.xmake/packages/g/glfw3webgpu/v1.0.1/1c77c5c3103d464ab63a5728bb543411/include
    C:/Users/14423/AppData/Local/.xmake/packages/s/soloud/2020.02.07/512314fd5727407eae3700844140601d/include
    C:/Users/14423/AppData/Local/.xmake/packages/m/miniaudio/0.11.17/8b370dd1b8a5478f9497d636212f2138/include
    C:/Users/14423/AppData/Local/.xmake/packages/g/glm/0.9.9+8/8335bab7c0314ab9921440de58961aac/include
    C:/Users/14423/AppData/Local/.xmake/packages/s/stb/2023.01.30/87edd883faeb4b168400e7458251d335/include
    C:/Users/14423/AppData/Local/.xmake/packages/s/stb/2023.01.30/87edd883faeb4b168400e7458251d335/include/stb
)

target_compile_definitions(illengine PRIVATE
    GLFW_INCLUDE_NONE
)
target_compile_options(illengine PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
if(MSVC)
    target_compile_options(illengine PRIVATE -W3)
else()
    target_compile_options(illengine PRIVATE -Wall)
endif()
if(CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "MSVC")
    target_compile_options(illengine PRIVATE /EHsc)
else()
    target_compile_options(illengine PRIVATE -fcxx-exceptions)
endif()
set_target_properties(illengine PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(illengine PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(illengine PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(illengine PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(illengine PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET illengine PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(illengine PRIVATE
    glfw3webgpu
    wgpu_native
    glfw3
    opengl32
    soloud
    Advapi32
    bcrypt
    d3dcompiler
    NtDll
    User32
    Userenv
    WS2_32
    user32
    shell32
    gdi32
)
target_link_directories(illengine PRIVATE
    C:/Users/14423/AppData/Local/.xmake/packages/g/glfw/3.3.8/d12e591897c9472fb7d3725fa5811388/lib
    C:/Users/14423/AppData/Local/.xmake/packages/w/wgpu-native/v0.17.0+2/449bbe26b0ba466ba594e179158e4caa/lib
    C:/Users/14423/AppData/Local/.xmake/packages/g/glfw3webgpu/v1.0.1/1c77c5c3103d464ab63a5728bb543411/lib
    C:/Users/14423/AppData/Local/.xmake/packages/s/soloud/2020.02.07/512314fd5727407eae3700844140601d/lib

)
target_sources(illengine PRIVATE
    src/Engine.cpp
    src/GraphicsManager.cpp
    src/InputManager.cpp
    src/main.cpp
    src/ResourceManager.cpp
    src/SoundManager.cpp
)


